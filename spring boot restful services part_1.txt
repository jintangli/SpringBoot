initialize restful service with spring boot
	**create project in start.spring.io
		generate a: maven project
		with: java
		spring boot: 2.0.0 or the latest
		
	project metadata
		**require group id and artifact id for any maven project
		group is analog of *package
			group: com.firstproject.rest.webservices
		artifact is analog of *main class
			artifact: restful-web-services
			
	dependencies
		libraries that will be imported when created project
		selected dependencies:
			web, DevTools, JPA, H2
			
	click on button 'Generate project'
		start.spring.io will create maven project and put it in a zip
	
	download that project into local machine
		unzip the file into some folder in hard drive
	
	launch eclipse
		import project
			file -> import -> <root directory of unzipped project>
			there should be pom.xml file in root directory
			
		click on finish button
			maven will download all the dependencies listed in pom
			set up the entire project
	
	project directory structure
		src/main/java
			contains all java code
				package: com.firstproject.rest.webservices.restfulwebservices
				class: RestfulWebServiceApplication.java
		src/main/resouce
			contains property files
		src/test/java
			contains test cases
		*pom.xml
			contains dependencies we chosen in start.spring.io
				the four starters we chosen
		*Maven Dependencies
			*big list of dependencies installed by Maven 
				*because of the starters we chosen
	
	start application
		go to file 
			
			RestfulWebServiceApplication.java
				@SpringBootApplication
				public class RestfulWebServiceApplication{
					public static void main(String[] args){
						SpringApplication.run(RestfulWebServiceApplication.class, 
											  args);
					}
				}
		
		right click -> run as Java application
			tomcat server should have started at port 8080
			
		
understanding restful service
	rest = representational state transfer
		**make best use of http
			**http mehtod
				post, put, get, delete
			**http status codes
				200, 204, 400
		
		resource is the key abstraction
			resource has an uri
				/users/1
			resource has different representation
				xml, json
				
course project: Social Media Application
	User -> Posts
		one to many relationship
	
	--retrieve all users 		- get /users
	--create a user				- post /users
	--retrieve one user			- get /users/{id} -> /users/1
	--delete a user				- delete /users/{id} ->/users/1
	
	--retrieve all posts for a user 	- get /users/{id}/posts
	--create a posts for a user			- post /users/{id}/posts
	--retrieve details of a post 		- get /users/{id}/posts/{post_id}
	
creating simple service
	create new class under com.firstproject.rest.webservices.restfulwebservices
		HelloWorldContoller.java
	
	**need to inform spring that this class is a *controller
		decorate *class with @RestController
		
	**need to map the method to the *get *uri /hello-world
		decorate method with @RequestMapping
			method=RequestMethod.GET
			path="/hello-world"
		*better way decorating method with @GetMapping
			path="/hello-world"
			
	enhancing the method to return a bean
		define *new method return a *bean HelloWorldBean
			public HelloWorldBean helloWorldBean()
		
		decorate method with
			@GetMapping(path="/hello-world-bean")
			
		create class HelloWorldBean
			**make sure class has *get method
			
		**when call in browser *bean is automatically convert to *json
	
		@RestController
		public class HelloWorldContoller{
			
			//@RequestMapping(method=RequestMethod.GET, path="/hello-world")
			@GetMapping(path="/hello-world")
			public String helloWorld(){
				return "Hello World"
			}
			
			@GetMapping(path="/hello-world-bean")
			public HelloWorldBean helloWorldBean(){
				return new HelloWorldBean("Hello World");
			} 
		
		}
		
		public class HelloWorldBean{
			private String message;
			
			public HelloWorldBean(String message){
				this.message = message;
			}
			
			public void setMessage(String message){
				this.message = message;
			}
			
			public String getMessage(){
				return this.message;
			}
			
			@Override
			public String toString(){
				return String.format("HelloWorldBean [message=%s]", message);
			}
			
		}
	
	call this method from browser
		type 
			localhost:8080/hello-world-bean
		return
			{message: "Hello World"}
		
	
Spring Boot auto config and dispatcher servlet
	
	set spring framework to *debug mode to see more details
		add one line to application.properties file
			
			logging.level.org.springframework = debug
		
		check AUTO-CONFIGURATION REPORT
			**auto config happens because of spring boot auto configuration
			**spring boot looks at all the classes, jars available on the *classpath
			**and base on whatever is on classpath, it tries to do auto configuration
			
			for example:
				DispatcherServletAutoConfiguration matched
					because dispatcher servlet is found on class path
		
	**dispatcher servlet is handling all the requests
		**dispatcher servlet is the front end controller for spring mvc 
			all request goes to dispatcher servlet firstproject
		**dispatcher servlet knows all the different mappings in the application
		
	@RestController is decorated with @ResponseBody
		@ResponseBody takes response from controller 
			and maps into other format by a message convertor
			and returns back the message in the new format
		

enhancing service with path variable
	get user with given id
		GET /users/{id}
	**id is a path parameter
	
	**use @PathVariable to decorate function *parameter
	**so spring will take the *value from uri and use it as function *argument

		@RestController
		public class HelloWorldContoller{
			// for /hello-world/path-variable/Jin
			// Jin will make into name parameter
			@GetMapping(path="/hello-world/path-variable/{name}")
			public HelloWorldBean helloWorldPathVariable(@PathVariable String name){
				return new HelloWorldBean(String.format("Hello World, %s", name));
			} 
		}
	
	
creating user bean and user service	
	create user bean class
		user has id, name, birthday, getter, setter, toString, constructor

	create user DAO class
		responsible for going into db and getting user info and returning user bean back
		
		**decorate UserDaoService class with @Component
			so that this class will be manage by spring
			
			// in UserDaoService.java file
			@Component
			public class UserDaoService{
				private static List<User> users = new ArrayList<>();
				static{
					users.add(new User(1, "Jin", new Date()));
					users.add(new User(2, "Erica", new Date()));
				}
				// public List<User> findAll()
				// public User save(User user)
				// public User findOne(int id)
				
			}
			
		
		
	
	
	
	
			